import { useEffect, useState, useRef } from "react";
import { FormControl, Button, Form, FormGroup, Spinner } from "react-bootstrap";
import { API_URL } from "@/config/index";
import Head from "next/head";
import Image from "next/image";
import dynamic from "next/dynamic";
const EditorJs = dynamic(() => import("react-editor-js"), { ssr: false });
import { ToastContainer, toast } from "react-toastify";
import Layout from "@/components/layout/Layout";
import { useRouter } from "next/dist/client/router";

export default function Editor({ blg }) {
  const instanceRef = useRef(null);
  const [values, setValues] = useState({
    title: blg.title,
    description: blg.description,
    content: blg.content,
    editorTools: "",
  });
  const [imagePreview, setImagePreview] = useState(
    blg.image ? blg.image.formats.thumbnail.url : null
  );
  const [loading, setLoading] = useState(false);

  const router = useRouter();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setValues({ ...values, [name]: value });
  };

  async function handleSave() {
    const savedData = await instanceRef.current.save();
    setValues({ ...values, content: JSON.stringify(savedData) });
  }

  let editorComponent;
  if (!values.editorTools) editorComponent = "Loading...";
  else {
    editorComponent = (
      <EditorJs
        instanceRef={(instance) => (instanceRef.current = instance)}
        tools={values.editorTools}
        placeholder={`Let's write an awesome blog!`}
        data={JSON.parse(values.content)}
        onChange={handleSave}
      />
    );
  }

  useEffect(() => {
    const importConstants = async () => {
      const tools = (await import("../../../components/editor/tools")).default;
      setValues({ ...values, editorTools: tools });
    };

    importConstants();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    if (
      !values.title ||
      values.title === "" ||
      JSON.stringify(values.title).length <= 11
    ) {
      setLoading(false);
      toast.error(
        "Title cannot be empty or less than 10 characters. Please fix title."
      );
    } else if (!JSON.parse(values.content).blocks[0] || values.content === "") {
      setLoading(false);
      toast.error("Content cannot be empty. Please write content.");
    } else {
      const res = await fetch(`${API_URL}/blogs/${blg.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });

      if (!res.ok) {
        toast.error("Something Went Wrong");
        setLoading(false);
      } else {
        const blog = await res.json();
        router.push(`/blogs/${blog.slug}`);
      }
    }
  };

  return (
    <Layout>
      <Head>
        <title>Create Blog</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="row justify-content-md-center pt-4 pb-2">
        <form
          className="col-md-8 mb-2 align-self-center"
          onSubmit={handleSubmit}
        >
          <div className="col-xxl-10 offset-xxl-1 px-xxl-4">
            <div className="row mb-2 font-robo">
              <h2 className="col">Edit Blog</h2>

              <div className="col text-end">
                <Button type="submit" className="rounded-3 px-4">
                  {loading ? (
                    <Spinner
                      as="span"
                      animation="border"
                      size="sm"
                      role="status"
                      aria-hidden="true"
                    />
                  ) : (
                    ""
                  )}
                  Publish
                </Button>
              </div>
            </div>
            <div className="col">
              <FormGroup className="mb-3">
                <Form.Label className="fw-bold font-robo">Title</Form.Label>
                <FormControl
                  aria-describedby="basic-addon1"
                  placeholder="Your Blog Title"
                  name="title"
                  id="title"
                  value={values.title}
                  onChange={handleInputChange}
                />
              </FormGroup>

              <FormGroup className="mb-3">
                <Form.Label className="fw-bold font-robo">
                  Description
                </Form.Label>
                <FormControl
                  as="textarea"
                  aria-describedby="basic-addon1"
                  placeholder="Your Blog Description"
                  name="description"
                  id="description"
                  value={values.description}
                  onChange={handleInputChange}
                />
              </FormGroup>
            </div>
            {imagePreview ? (
              <Image src={imagePreview} height={100} width={170} />
            ) : (
              <div>
                <p>No image uploaded</p>
              </div>
            )}
          </div>
          <div className="col">{editorComponent}</div>
        </form>
      </div>
      <ToastContainer />
    </Layout>
  );
}

export async function getServerSideProps({ params: { id } }) {
  const res = await fetch(`${API_URL}/blogs/${id}`);
  const blg = await res.json();
  return {
    props: {
      blg,
    },
  };
}
